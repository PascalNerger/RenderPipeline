#pragma once

#include <glm/glm.hpp>

#include "PBR/Core/BaseTypes.h"
#include "PBR/Core/RefCounting.h"
#include "PBR/Core/EnumClassFlags.h"

#include "Shader.h"
#include "Buffer.h"
#include "VertexArray.h"
#include "FrameBuffer.h"


namespace EngineCore
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// RenderApi ///////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum class RenderApi : uint8
	{

		None = 0,
		OpenGL = 1,
		Direct3D = 2,
		Vulkan = 3,
		Metal = 4

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// PrimitiveType ///////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum class PrimitiveType : uint8
	{

		None = 0,
		Points = 1,
		Lines = 2,
		Triangles = 3,
		Quads = 4

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// ClearFlags //////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum class ClearFlags : uint8
	{

		None = 0,
		ColorBuffer = 1 << 0,
		DepthBuffer = 1 << 1,
		StencilBuffer = 1 << 2

	};

	ENUM_CLASS_FLAGS(ClearFlags)

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// CullMode ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum class CullMode : uint8
	{

		None = 0,
		Front = 1,
		Back = 2,

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// DepthFunc ///////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum class DepthFunc : uint8
	{

		None = 0,
		Less = 1,
		LessEqual = 2,

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// BlendFunc ///////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum class BlendFunc : uint8
	{

		None = 0,
		Zero = 1,
		One = 2,
		SourceAlpha = 3,
		DestinationAlpha = 4,
		OneMinusSourceAlpha = 5

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// RHIContext //////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct RHIContext
	{

	public:

		RHIContext();
		virtual ~RHIContext() { }

		virtual void RHIClear(const ClearFlags flags = ClearFlags::ColorBuffer | ClearFlags::DepthBuffer) = 0;
		virtual void RHISetClearColor(const glm::vec4& color) = 0;

		virtual void RHISetDepthFunc(const DepthFunc func) = 0;
		virtual void RHIDepthMask(const bool value) = 0;
		virtual void RHISetCullMode(const CullMode mode) = 0;
		virtual void RHISetBlendFunc(const BlendFunc func) = 0;

		virtual void RHISetViewport(const uint32 x, const uint32 y, const uint32 width, const uint32 height) = 0;


		virtual void RHISetVertexBuffer(const VertexBufferRef& vertexBuffer) = 0;
		virtual void RHISetIndexBuffer(const IndexBufferRef& indexBuffer) = 0;
		virtual void RHISetVertexArray(const VertexArrayRef& vertexArray) = 0;

		virtual void RHISetShader(const ShaderRef& shader) = 0;
		virtual void RHISetFrameBuffer(const FrameBufferRef& frameBuffer) = 0;

		virtual void RHISetShaderParameter() = 0;
		virtual void RHISetShaderUniformParameter() = 0;

		virtual void RHIBeginRenderPass() = 0;
		virtual void RHIEndRenderPass() = 0;

		virtual void RHIDrawPrimitive() = 0;
		virtual void RHIDrawIndexedPrimitive() = 0;
		virtual void RHIDrawIndexedInstancedPrimitive(const uint32 instances) = 0;

		virtual RenderApi GetApi() const = 0;

	public:

		static RHIContext* Create(const RenderApi api);
		static void Destroy() { delete Instance; }

		static RHIContext& GetContext() { return *Instance; }

	private:

		static RHIContext* Instance;

	};

}