#pragma once

#include "PBR/RHI/Shader.h"
#include "PBR/RHI/Texture.h"
#include "PBR/RHI/FrameBuffer.h"

#include "PBR/RenderCore/RenderStage.h"
#include "PBR/RenderCore/RenderPass.h"


namespace EngineCore
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Forward Declarations ////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class Renderer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// FxaaPass ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct FxaaPassUniformStruct
	{

		alignas(8) uint64 SourceTexture;
		alignas(4) float DisplayEdges;

	};

	class FxaaPass : public RenderPass
	{

	public:

		FxaaPass(Renderer* renderer);
		virtual ~FxaaPass();

		void Init();
		void Execute(const Texture2DRef& source);

	private:

		UniformBufferRef UniformBuffer;
		FxaaPassUniformStruct Uniforms;

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// FxaaStage ///////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class FxaaStage : public RenderStage
	{

	public:

		FxaaStage(Renderer* renderer);
		virtual ~FxaaStage();

		void Init();
		void Execute(const Texture2DRef& source);

		inline const Texture2DRef& GetTargetTexture() const { return FxaaTarget; }

	private:

		FxaaPass* FxaaPass;

		ShaderRef FxaaShader;
		FrameBufferRef FxaaFrameBuffer;

		Texture2DRef FxaaTarget;

	};

}