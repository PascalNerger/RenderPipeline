#pragma once

#include "PBR/RenderCore/RenderStage.h"
#include "PBR/RenderCore/RenderPass.h"


namespace EngineCore
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Forward Declarations ////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class Renderer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// QuadPass ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct QuadPassUniformStruct
	{

		alignas(8) uint64 Texture;

	};

	static_assert(sizeof(QuadPassUniformStruct) <= 16, "Wrong Uniform Buffer size: QuadPassUniformStruct!");
	static_assert(offsetof(QuadPassUniformStruct, Texture) == 0, "Wrong Uniform Buffer offset: QuadPassUniformStruct.Texture!");

	class QuadPass : public RenderPass
	{

	public:

		QuadPass(Renderer* renderer);
		virtual ~QuadPass();

		void Init();
		void Execute(const Texture2DRef& texture);

	private:

		UniformBufferRef UniformBuffer;
		QuadPassUniformStruct Uniforms;

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// QuadStage ///////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class QuadStage : public RenderStage
	{

	public:

		QuadStage(Renderer* renderer);
		virtual ~QuadStage();

		void Init();
		void Execute(const Texture2DRef& texture);

	private:

		QuadPass* QuadPass;
		ShaderRef QuadShader;

	};

}