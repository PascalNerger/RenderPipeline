#pragma once

#include "PBR/RenderCore/RenderPass.h"
#include "PBR/RenderCore/RenderStage.h"


namespace EngineCore
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Forward Declarations ////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class Renderer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// SkyboxPass //////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct SkyboxPassUniformStruct
	{

		alignas(16) glm::fmat4 ViewMatrix;
		alignas(16) glm::fmat4 ProjectionMatrix;

		alignas(8) uint64 Skybox;

	};

	class SkyboxPass : public RenderPass
	{

	public:

		SkyboxPass(Renderer* renderer);
		virtual ~SkyboxPass();

		void Init();
		void Execute(const CameraRef& camera, const TextureCubeRef& skybox);

	private:

		UniformBufferRef UniformBuffer;
		SkyboxPassUniformStruct Uniforms;

	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// SkyboxStage /////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class SkyboxStage : public RenderStage
	{

	public:

		SkyboxStage(Renderer* renderer);
		virtual ~SkyboxStage();

		void Init(const SceneStage* sceneStage);
		void Execute(const CameraRef& camera, const TextureCubeRef& skybox);

		inline const Texture2DRef& GetTargetTexture() const { return TargetTexture; }

	private:

		SkyboxPass* SkyboxPass;

		ShaderRef SkyboxShader;
		FrameBufferRef SkyboxFrameBuffer;

		Texture2DRef TargetTexture;

	};

}