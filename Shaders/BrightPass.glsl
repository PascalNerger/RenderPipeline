#type vertex

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// In variables ////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) in highp vec2 position;
layout(location = 1) in highp vec2 uv_coord;

/////////////////////////////////////////////////////////////
// Vertex shader variables //////////////////////////////////
/////////////////////////////////////////////////////////////

out vertex_shader_out
{

	highp vec2 uv_coord;

} vs_out;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The vertex shader entry point.
 */
void main()
{
	gl_Position = vec4(position.x, position.y, 0.0f, 1.0f);
	vs_out.uv_coord = uv_coord;
}



#type fragment

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// Out variables ////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) out vec4 color;

/////////////////////////////////////////////////////////////
// Vertex shader variables //////////////////////////////////
/////////////////////////////////////////////////////////////

in vertex_shader_out
{

	highp vec2 uv_coord;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

// 16
layout(std140, binding = 0) uniform BrightPassData
{

	// 0
	highp sampler2D scene_texture;

	// 8
	highp float threshold;

} u_data;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The fragment shader entry point.
 */
void main()
{
	vec3 frag_color = texture(u_data.scene_texture, vs_out.uv_coord).rgb;
	vec3 luminance_vector = vec3(0.2126f, 0.7152f, 0.0722f);

	float brightness = dot(frag_color, luminance_vector);

	if (brightness > u_data.threshold)
		color = vec4(frag_color, 1.0f);
	else
		color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
}