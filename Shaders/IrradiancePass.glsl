#type vertex

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// In variables /////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) in highp vec3 position;

/////////////////////////////////////////////////////////////
// Vertex shader out variables //////////////////////////////
/////////////////////////////////////////////////////////////

out vertex_shader_out
{

	highp vec3 world_pos;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(std140, binding = 0) uniform IrradianceInfo
{

	highp mat4 view_matrix;
	highp mat4 projection_matrix;

	highp samplerCube map;


} u_info;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The fragment shader entry point.
 */
void main()
{
	gl_Position = u_info.projection_matrix * u_info.view_matrix * vec4(position, 1.0f);
	vs_out.world_pos = position;
}

#type fragment

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// Defines //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

#define PI 3.14159265359f

/////////////////////////////////////////////////////////////
// Out variables ////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) out vec4 color;

/////////////////////////////////////////////////////////////
// Vertex shader variables //////////////////////////////////
/////////////////////////////////////////////////////////////

in vertex_shader_out
{

	highp vec3 world_pos;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(std140, binding = 0) uniform IrradianceInfo
{

	highp mat4 view_matrix;
	highp mat4 projection_matrix;

	highp samplerCube map;


} u_info;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The fragment shader entry point.
 */
void main()
{

	vec3 n = normalize(vs_out.world_pos);
	vec3 irradiance = vec3(0.0f);

	vec3 up = vec3(0.0f, 1.0f, 0.0f);
	vec3 right = cross(up, n);
	up = cross(n, right);

	float sample_delta = 0.025f;
	float sample_count = 0.0f;

	for (float phi = 0.0f; phi < 2.0f * PI; phi += sample_delta)
	{

		for (float theta = 0.0f; theta < 0.5f * PI; theta += sample_delta)
		{

			vec3 tangent_sample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
			vec3 sample_vec = tangent_sample.x * right + tangent_sample.y * up + tangent_sample.z * n;

			irradiance += texture(u_info.map, sample_vec).rgb * cos(theta) * sin(theta);
			++sample_count;
		}

	}

	irradiance = PI * irradiance * (1.0f / sample_count);
	color = vec4(irradiance, 1.0f);
}