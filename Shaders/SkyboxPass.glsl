#type vertex

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// In variables /////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) in highp vec3 position;

/////////////////////////////////////////////////////////////
// Vertex shader out variables //////////////////////////////
/////////////////////////////////////////////////////////////

out vertex_shader_out
{

	highp vec3 uv_coord;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

// 144
layout(std140, binding = 0) uniform SkyboxInfo
{

	// 0
	highp mat4 view_matrix;

	// 64
	highp mat4 projection_matrix;

	// 128
	highp samplerCube skybox;

} u_info;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The vertex shader entry point.
 */
void main()
{
	vec4 pos = u_info.projection_matrix * u_info.view_matrix * vec4(position, 1.0f);

	// Make sure perspective divide (used to calculate the depth value) is equal to one,
	// so the skybox is always rendered behind all the other objects
	gl_Position = pos.xyww;

	vs_out.uv_coord = position;
}

#type fragment

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// Out variables ////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) out vec4 color;

/////////////////////////////////////////////////////////////
// Vertex shader variables //////////////////////////////////
/////////////////////////////////////////////////////////////

in vertex_shader_out
{

	highp vec3 uv_coord;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

// 144
layout(std140, binding = 0) uniform SkyboxInfo
{

	// 0
	highp mat4 view_matrix;

	// 64
	highp mat4 projection_matrix;

	// 128
	highp samplerCube skybox;

} u_info;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The fragment shader entry point.
 */
void main()
{
	vec3 result = texture(u_info.skybox, vs_out.uv_coord).rgb;
	color = vec4(result, 1.0f);
}