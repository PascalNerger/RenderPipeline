#type vertex

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// In variables /////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) in highp vec3 position;

/////////////////////////////////////////////////////////////
// Vertex shader out variables //////////////////////////////
/////////////////////////////////////////////////////////////

out vertex_shader_out
{

	highp vec3 local_pos;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(std140, binding = 0) uniform SphereMapData
{

	highp mat4 view_matrix;
	highp mat4 projection_matrix;

	highp sampler2D sphere_map;

} u_data;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/**
 * The fragment shader entry point.
 */
void main()
{
	gl_Position = u_data.projection_matrix * u_data.view_matrix * vec4(position, 1.0f);
	vs_out.local_pos = position;
}

#type fragment

#version 450 core
#extension GL_ARB_bindless_texture : require

/////////////////////////////////////////////////////////////
// Defines //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

#define PI 3.14159265359f

/////////////////////////////////////////////////////////////
// Out variables ////////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(location = 0) out vec4 color;

/////////////////////////////////////////////////////////////
// Vertex shader variables //////////////////////////////////
/////////////////////////////////////////////////////////////

in vertex_shader_out
{

	highp vec3 local_pos;

} vs_out;

/////////////////////////////////////////////////////////////
// Uniform variables ////////////////////////////////////////
/////////////////////////////////////////////////////////////

layout(std140, binding = 0) uniform SphereMapData
{

	highp mat4 view_matrix;
	highp mat4 projection_matrix;

	highp sampler2D sphere_map;

} u_data;

/////////////////////////////////////////////////////////////
// Functions ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

/*
 * Samples a spherical map to a 2-dimensional uv coordinate.
 *
 * @param The direction used for sampling.
 *
 * @return The uv coordinate.
 */
const vec2 inv_atan = vec2(0.1591f, 0.3183f);
vec2 SampleSphericalMap(vec3 v)
{
	vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
	uv *= inv_atan;

	uv += 0.5f;
	return uv;
}

/**
 * The fragment shader entry point.
 */
void main()
{
	vec2 uv_coord = SampleSphericalMap(normalize(vs_out.local_pos));

	vec3 result = texture(u_data.sphere_map, uv_coord).rgb;
	color = vec4(result, 1.0f);
}